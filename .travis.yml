sudo: required
language:
  - generic
cache:
  - apt
services:
  - docker

env:
  global:
    - ROS_DISTRO=kinetic
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    - BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)

################################################################################

before_install:
  - docker run -e BRANCH -d --name alica-test -v $CI_SOURCE_PATH:/travis ros:kinetic-ros-core-xenial tail -f /dev/null
  - docker ps

install:
  - docker exec -t alica-test bash -c "
    rm /etc/ros/rosdep/sources.list.d/20-default.list && 
    rosdep init && 
    rosdep update && 
    mkdir -p ~/catkin_ws/src && 
    cd ~/catkin_ws/src && 
    apt-get update && 
    apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-kinetic-catkin python-catkin-tools ros-kinetic-rostest && 
    source /opt/ros/kinetic/setup.bash && 
    catkin_init_workspace && 
    cd ~/catkin_ws && 
    catkin build && 
    source devel/setup.bash && 
    cd ~/catkin_ws/src && 
    ln -s /travis ."

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  - docker exec -t alica-test bash -c "
    cd ~/catkin_ws/src && 
    wstool init && 
    if [[ -f /travis/dependencies.rosinstall ]] ; then sed -i -e 's/rr-devel/$BRANCH/g' /travis/dependencies.rosinstall; if ! wstool merge /travis/dependencies.rosinstall; then sed -i -e 's/$BRANCH/rr-devel/g' /travis/dependencies.rosinstall; wstool merge /travis/dependencies.rosinstall; fi; fi && 
    wstool up && 
    cd ~/catkin_ws && 
    rosdep install -y --from-paths src --ignore-src --rosdistro kinetic"

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - docker exec -t alica-test bash -c "
    source /opt/ros/kinetic/setup.bash && 
    cd ~/catkin_ws && 
    catkin build --no-status && 
    source devel/setup.bash && 
    travis_wait catkin run_tests --no-status && catkin_test_results"
